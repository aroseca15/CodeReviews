image:
  name: hashicorp/terraform:1.1.6 #or version: 0.12.21
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

stages:
  - Test and Lint
  - Build and Push
  - Staging Plan
  - Staging Apply
  - Production Plan
  - Production Apply
  - Destroy

Test and Lint:
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind

  stage: Test and Lint
  script:
    - apk add --update docker-compose
    - docker-compose run --rm app sh -c "python manage.py test"
    # Below: Later we need to add the flake8 or similar linting package to check code after launch.
    # - docker-compose run --rm app sh -c "python manage.py test && flake8"

  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check

  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Build and Push:
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind

  stage: Build and Push
  script:
    - apk add py3-pip
    - pip install awscli
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA .
    - $(aws ecr get-login --no-include-email --region us-west-2)
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPO:$CI_COMMIT_SHORT_SHA $ECR_REPO:latest
    - docker push $ECR_REPO:latest
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Plan:
  stage: Staging Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select stage || terraform workspace new stage
    - terraform plan

  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Apply:
  stage: Staging Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select stage || terraform workspace new stage
    - terraform apply -auto-approve



  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Production Plan:
  stage: Production Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select prod || terraform workspace new prod
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select prod  || terraform workspace new prod
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual

Staging Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select staging
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
      when: manual

Production Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select production
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
